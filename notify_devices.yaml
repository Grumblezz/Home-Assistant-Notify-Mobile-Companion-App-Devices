blueprint:
  name: Notify Mobile App Devices
  description: >-
    **Struggling to make use of the notification options of the [Home Assistant Companion App](https://companion.home-assistant.io/) on your mobile device?**
    **Then this script can help you in the right direction.**
    ***
    For more instructions or questions take a look in the [Home Assistant Community forum topic](https://community.home-assistant.io/t/notify-mobile-companion-app-devices/512487)
    Ever gone through all of the options of the [Companion app](https://companion.home-assistant.io/docs/notifications/notifications-basic)?, then you may have lost your self 🤔 in all of the options you can pick you might be dazzled 😵 what you can do with it, let alone reapply it in another automation 😕.
    ## Features of this script ##
     * Use an UI to select options instead of reading the documentation 😵‍💫🥴🤔🥲🥱😫😝
     * Able to send notifications to one or more specific device(s) or all devices
     * Send notifications based on the device(s) state: 
       * Home
       * Away
       * Both (Home and Away)
     * Send notifications to Android and iOS devices (!). The script then filters the input to what is supported per platform. Thus Android features are not send to iOS devices and visa versa.
     * Send notifications with actionable actions. The script then filters the actions per  platform. Thus Android actions are not send to iOS devices and visa versa.
     * Support notifications with camera images/live feed for camera devices, also for [Google Nest camera devices](https://www.home-assistant.io/integrations/nest/) (!).
    ***
    ### Background ###
    *I noticed over the last year or so that I made more and more use of the notifications via the Home Assistant Companion App on the various mobile devices, and I loved it so much that I applied it for many automations. During that journey I was struggling with adding and fixing the code in various automations (there are +/- 40 automations where I was using it) so maintaining all of it was a nightmare. And so it began, I made one script that has all the logic in it to notify all or specific devices, which have the app installed, and let the automation call the script. 
    And so during that journey I also wanted to use the selectors to have a UI to guide the process with all sorts of options.*
    ***
    ## Examples ##
    ***
    ### Example 1 ###
    Send a persistent notification, that the user can’t remove.
    ```
    service: script.notify_devices
    data:
      notify_home_or_away: Both
      data_notification_icon: mdi:human-greeting-variant
      notify_title: Example 1
      notify_message: Send a persistent notification, that the user can't remove
      data_group: Example
      data_tag: Use this tag when you need to remove it
      data_importance: high
      data_sticky: true
      data_persistent: true
    ```
    ### Example 2 ###
    Send a clean_persistent notification, so the notification is removed.
    ```
    service: script.notify_devices
    data:
      notify_home_or_away: Both
      data_tag: Use this tag when you need to remove it
      data_importance: high
      notify_message: clear_notification
    ```
    ### Example 3 ###
    Send a notification with camera image file. The data_camera can accept various
    options, but the results are different for Android or iOS.
    More information: 
     * https://companion.home-assistant.io/docs/notifications/notification-attachments
     * https://www.home-assistant.io/integrations/nest/
    Examples:
     * data_camera: camera.name
     * data_camera: /api/nest/event_media/{\{trigger.event.data.device_id}}/{\{trigger.event.data.nest_event_id}}/thumbnail
     * data_camera: /api/nest/event_media/{\{trigger.event.data.device_id}}/{\{trigger.event.data.nest_event_id}}
     * data_camera: /media/local/video.mp4
     * data_camera: https://example.com/video.mp4
     * data_camera: /media/local/photo.jpg
     * data_camera: https://example.com/image.jpg
     * data_camera: /media/local/audio.mp3
     * data_camera: https://example.com/audio.mp3
    ```
    service: script.notify_devices
    data:
      notify_home_or_away: Both
      data_notification_icon: mdi:cctv
      notify_title: Camera
      notify_message: Send a camera picture notification
      data_group: Camera
      data_importance: high
      data_sticky: true
      data_camera: camera.name
    ```
     Sends a Nest camera image file 
    ```
    service: script.notify_devices
    data:
      notify_home_or_away: Both
      data_notification_icon: mdi:cctv
      notify_title: Camera
      notify_message: Send a Nest camera picture notification
      data_group: Camera
      data_importance: high
      data_sticky: true
      data_camera: >- 
        {{'/api/nest/event_media/{{'~'trigger.event.data.device_id'~'}}/{{'~'trigger.event.data.nest_event_id'~'}}/thumbnail'}}
    ```
    ### Example 4 ###
    Actionable notifications are a unique type of notification as they allow the user to add buttons to the notification which can then send an event to Home Assistant once clicked. This event can then be used in an automation allowing you to perform a wide variety of actions. These notifications can be sent to either iOS or Android.
    Some useful examples of actionable notifications:
     * A notification is sent whenever motion is detected in your home while you're away or asleep. A "Sound Alarm" action button is displayed alongside the notification, that when tapped, will sound your burglar alarm.
     * Someone rings your front doorbell. You receive a notification with a live camera stream of the visitor outside along with action buttons to lock or unlock your front door.
     * Receive a notification whenever your garage door opens with action buttons to open or close the garage.
    Click [here](https://companion.home-assistant.io/docs/notifications/actionable-notifications#building-actionable-notifications) for the documentation
    **This script filters the actions per device. This means you can send information to Android and iOS device simultaneously 🙂 .**
    ```
    service: script.notify_devices
    data:
      notify_home_or_away: Both
      data_notification_icon: mdi:gesture-tap-button
      notify_title: Actionable Notifications
      notify_message: Send a notification with actions to Android and iOS device
      data_group: Notifications
      data_importance: high
      data_actions:
        - action: ALARM
          # This is visible on both devices
          title: Sound Alarm
        - action: SILENCE
          # This is visible on both devices, but the icons are only shown on iOS devices
          title: Silence Alarm
          icon: sfsymbols:bell.slash
        - action: URI
          # This is visible on both devices
          title: Open Url
          uri: https://google.com
        - action: "URI"
          # This is only visible on Android devices
          title: "Open an Android app"
          # Name of package for application you would like to open
          uri: "app://com.twitter.android"
        - action: "OPEN"
          # This is only visible on iOS devices
          title: "Open iOS URL"
          uri: "https://google.com"
        - action: "CALL"
          # This is only visible on iOS devices
          title: "Call - iOS only"
          uri: "tel:2125551212"
    ```
  domain: script
  homeassistant:
    min_version: 2022.1.0
  source_url: https://github.com/Grumblezz/Home-Assistant-Notify-Mobile-Companion-App-Devices/blob/main/notify_devices.yaml
mode: parallel
max: 10
icon: mdi:cellphone-message
fields:
  notify_devices:
    name: Device to notify
    description: Device needs to run the official Home Assistant app to receive notifications. If not specified, then all devices are used.
    required: false
    selector:
      device:
        multiple: true
        integration: mobile_app
  notify_home_or_away:
    name: Notify those that are Home or Away?
    required: false
    example: Both
    selector:
      select:
        multiple: false
        mode: dropdown
        options:
          - Home
          - Away
          - Both
  data_notification_icon:
    name: Android Only - Notification icon (Optional)
    required: false
    description: Changing the default notification status bar icon
    example: mdi:motion-outline
    selector:
      icon: null
  notify_title:
    name: Notification title (Optional)
    description: Notification title, required when used with TTS
    example: Frontdoor
    required: false
    selector:
      template: null
  data_subtitle:
    name: Notification Subtitle / subject (Optional)
    description: Subtitles and subjects are secondary headings
    required: false
    example: Subtitle goes here
    selector:
      text:
        multiline: false
        type: text
  notify_message:
    name: Notification message
    required: true
    description: Notification message
    example: There is somebody at the door!
    selector:
      select:
        options:
          - TTS
          - remove_channel
          - clear_notification
          - There is somebody at the door!
          - There is somebody in the garden!
        custom_value: true
        multiple: false
  data_group:
    name: Notification grouping (Optional)
    description: Combine notification together visually.
    required: false
    example: Motion
    selector:
      select:
        options:
          - Alarm
          - Example
          - Motion
        custom_value: true
        multiple: false
  data_channel:
    name: Notification channel (Optional)
    description: Notification channel
    required: false
    example: Motion
    selector:
      select:
        options:
          - Motion Detected
          - default
          - Importance
          - Cover
          - Alarm
          - Birthday
          - Door
          - Person Detected
          - Doorbell Ring
          - Updates
          - Vacuum
          - Fan
        custom_value: true
        multiple: false
  data_tag:
    name: Notification tag (Optional)
    description: Notification tag
    required: false
    example: backyard-motion-detected
    selector:
      select:
        options:
          - backyard-motion-detected
          - alarm
          - doorbell
          - updates
          - motion
          - cover
          - fan
        custom_value: true
        multiple: false
  data_importance:
    name: Important notification
    description: Notifications will appear immediately in most cases. However, in some cases (such as phone being stationary or when screen has been turned off for prolonged period of time) and this is to override that default behavior
    required: false
    example: high
    selector:
      select:
        options:
          - high
  data_device_ring:
    name: Device Ring (Optional)
    description: Make the device ring even if on vibrate/silent ringer mode. Max will Only work for TTS messages
    required: false
    example: "On"
    selector:
      select:
        options:
          - "On"
          - Max
        multiple: false
  data_visibility:
    name: Android Only - Lock Screen Visibility (Optional)
    required: false
    description: How much of a notification is visible on the lock screen
    example: public
    selector:
      select:
        options:
          - public
          - private
          - secret
        custom_value: false
        multiple: false
  data_sticky:
    name: Android Only - Keep notification? (Optional)
    description: Keep the notification from being dismissed when the user selects it
    example: true
    required: false
    selector:
      boolean: null
  data_persistent:
    name: Android Only - Persistent notification? (Optional)
    description: Persistent notifications are notifications that cannot be dismissed by swiping away. It requires the Notification tag to be set. If not set it will set it to persistent.
    example: true
    required: false
    selector:
      boolean: null
  data_timeout:
    name: Android Only - Timeout message in seconds (Optional)
    description: How many seconds a notification will be shown on a users device before being removed/dismissed automatically.
    required: false
    example: 120
    selector:
      number:
        min: 0
        max: 600
        step: 10
        mode: slider
  data_chronometer:
    name: Android Only - Notifications with a count up/down timer (Optional)
    example: '"{{now()+timedelta(minutes=1)}}"'
    description: Show a count up/down timer. Notification will not disappear when the timer reaches 0. Instead, it will continue decrementing into negative values.
    required: false
    selector:
      datetime: null
  data_notification_color:
    name: Android Only - Color of the notification icon (Optional)
    required: false
    description: In Android you can set the color of the notification icon
    example: "[255,0,0]"
    selector:
      color_rgb: null
  data_critical:
    name: iOS Only - Critical notification? (Optional)
    description: Critical alerts always appear at the top of your lock screen above all other notifications, and play a sound even if Do Not Disturb is enabled or the iPhone is muted.
    example: true
    required: false
    selector:
      boolean: null
  data_ios_sound:
    name: iOS Only - Sounds? (Optional)
    description: Adding a custom sound to a notification allows you to easily identify the notification without even looking at your device. You must use the full filename (including extension) in the payload. If "iOS Only - Sound Volume Level" is not defined, then it will set the default sound level to 50%
    example: US-EN-Morgan-Freeman-Roommate-Is-Arriving.wav
    required: false
    selector:
      select:
        options:
          - default
          - 3rdParty_DirectionDown_Haptic.caf
          - 3rdParty_DirectionUp_Haptic.caf
          - 3rdParty_Failure_Haptic.caf
          - 3rdParty_Retry_Haptic.caf
          - 3rdParty_Start_Haptic.caf
          - 3rdParty_Stop_Haptic.caf
          - 3rdParty_Success_Haptic.caf
          - access_scan_complete.caf
          - AccessSanComplete_Haptic
          - acknowledgment_received.caf
          - acknowledgment_sent.caf
          - alarm.caf
          - Alarm_Haptic.caf
          - Alarm_Nightstand_Haptic.caf
          - Alert_3rdParty_Haptic.caf
          - Alert_3rdParty_Salient_Haptic.caf
          - Alert_ActivityFriendsGoalAttained_Haptic.caf
          - Alert_ActivityGoalAttained_Haptic.caf
          - Alert_ActivityGoalAttained_Salient_Haptic.caf
          - Alert_ActivityGoalBehind_Haptic.caf
          - Alert_ActivityGoalBehind_Salient_Haptic.caf
          - Alert_ActivityGoalClose_Haptic.caf
          - Alert_BatteryLow_10p_Haptic.caf
          - Alert_BatteryLow_5p_Haptic.caf
          - Alert_BatteryLow_5p_Salient_Haptic.caf
          - Alert_Calendar_Haptic.caf
          - Alert_Calendar_Salient_Haptic.caf
          - Alert_Health_Haptic.caf
          - Alert_Mail_Haptic.caf
          - Alert_Mail_Salient_Haptic.caf
          - Alert_MapsDirectionsInApp_Haptic.caf
          - Alert_Messages_1_Haptic.caf
          - Alert_Messages_1_Salient_Haptic.caf
          - Alert_Messages_2_Haptic.caf
          - Alert_Messages_3_Haptic.caf
          - Alert_PassbookBalance_Haptic.caf
          - Alert_PassbookGeofence_Haptic.caf
          - Alert_PassbookGeofence_Salient_Haptic.caf
          - Alert_PhotostreamActivity_Haptic.caf
          - Alert_ReminderDue_Haptic.caf
          - Alert_ReminderDue_Salient_Haptic.caf
          - Alert_SpartanConnected_LowLatency_Haptic.caf
          - Alert_SpartanConnecting_Haptic.caf
          - Alert_SpartanConnecting_LowLatency_Haptic.caf
          - Alert_SpartanDisconnected_LowLatency_Haptic.caf
          - Alert_Voicemail_Haptic.caf
          - Alert_Voicemail_Salient_Haptic.caf
          - Alert_WalkieTalkie_Haptic.caf
          - Anticipate.caf
          - AutoUnlock_Haptic.caf
          - BatteryMagsafe_Haptic.caf
          - Beat_Haptic.caf
          - begin_record.caf
          - Bloom.caf
          - BuddyMigrationStart_Haptic.caf
          - BuddyPairingFailure_Haptic.caf
          - BuddyPairingRemoteConnection_Haptic.caf
          - BuddyPairingRemoteTap_Haptic.caf
          - BuddyPairingSuccess_Haptic.caf
          - busy_tone_ansi.caf
          - busy_tone_cept.caf
          - call_waiting_tone_ansi.caf
          - call_waiting_tone_cept.caf
          - Calypso.caf
          - camera_shutter_burst.caf
          - camera_shutter_burst_begin.caf
          - camera_shutter_burst_end.caf
          - camera_timer_countdown.caf
          - camera_timer_final_second.caf
          - CameraCountdownImminent_Haptic.caf
          - CameraCountdownTick_Haptic.caf
          - CameraShutter_Haptic.caf
          - Choo_Choo.caf
          - connect_power.caf
          - ct-busy.caf
          - ct-call-waiting.caf
          - ct-congestion.caf
          - ct-error.caf
          - ct-keytone2.caf
          - ct-path-ack.caf
          - Descent.caf
          - Detent_Haptic.caf
          - DoNotDisturb_Haptic.caf
          - dtmf-0.caf
          - dtmf-1.caf
          - dtmf-2.caf
          - dtmf-3.caf
          - dtmf-4.caf
          - dtmf-5.caf
          - dtmf-6.caf
          - dtmf-7.caf
          - dtmf-8.caf
          - dtmf-9.caf
          - dtmf-pound.caf
          - dtmf-star.caf
          - end_call_tone_cept.caf
          - end_record.caf
          - engage_power.caf
          - engage_power_short.caf
          - ET_BeginNotification_Haptic.caf
          - ET_BeginNotification_Salient_Haptic.caf
          - ET_RemoteTap_Receive_Haptic.caf
          - ET_RemoteTap_Send_Haptic.caf
          - Fanfare.caf
          - focus_change_app_icon.caf
          - focus_change_keyboard.caf
          - focus_change_large.caf
          - focus_change_small.caf
          - go_to_sleep_alert.caf
          - GoToSleep_Haptic.caf
          - HealthNotificaiton.caf
          - HourlyChime_Haptic.caf
          - HummingbirdCompletion_Haptic.caf
          - HummingbirdNotification_Haptic.caf
          - jbl_ambiguous.caf
          - jbl_begin.caf
          - jbl_cancel.caf
          - jbl_confirm.caf
          - jbl_no_match.caf
          - key_press_click.caf
          - key_press_delete.caf
          - key_press_modifier.caf
          - keyboard_press_clear.caf
          - keyboard_press_delete.caf
          - keyboard_press_normal.caf
          - Ladder.caf
          - lock.caf
          - long_low_short_high.caf
          - low_power.caf
          - mail-sent.caf
          - MessagesIncoming_Haptic.caf
          - MessagesOutgoing_Haptic.caf
          - middle_9_short_double_low.caf
          - Minuet.caf
          - multiway_invitation.caf
          - MultiwayInvitation.caf
          - MultiwayJoin.caf
          - MultiwayLeave.caf
          - navigation_pop.caf
          - navigation_push.caf
          - NavigationGenericManeuver_Haptic.caf
          - NavigationGenericManeuver_Salient_Haptic.caf
          - NavigationLeftTurn_Haptic.caf
          - NavigationLeftTurn_Salient_Haptic.caf
          - NavigationRightTurn_Haptic.caf
          - NavigationRightTurn_Salient_Haptic.caf
          - new-mail.caf
          - News_Flash.caf
          - nfc_scan_complete.caf
          - Noir.caf
          - Notification_Haptic.caf
          - Notification_Salient_Haptic.caf
          - OnOffPasscodeFailure_Haptic.caf
          - OnOffPasscodeUnlock_Haptic.caf
          - OnOffPasscodeUnlockCampanion_Haptic.caf
          - OrbExit_Haptic.caf
          - OrbLayers_Haptic.caf
          - payment_failure.caf
          - payment_success.caf
          - PhoneAnswer_Haptic.caf
          - PhoneHangUp_Haptic.caf
          - PhoneHold_Haptic.caf
          - photoShutter.caf
          - PhotosZoomDetent_Haptic.caf
          - Preview_AudioAndHaptic.caf
          - QB_Dictation_Haptic.caf
          - QB_Dictation_Off_Haptic.caf
          - ReceivedMessage.caf
          - RemoteCameraShutterBurstBegin_Haptic.caf
          - RemoteCameraShutterBurstEnd_Haptic.caf
          - ringback_tone_ansi.caf
          - ringback_tone_aus.caf
          - ringback_tone_cept.caf
          - ringback_tone_hk.caf
          - ringback_tone_uk.caf
          - RingerChanged.caf
          - Ringtone_2_Ducked_Haptic-sashimi.caf
          - Ringtone_2_Haptic-sashimi.caf
          - Ringtone_UK_Haptic.caf
          - Ringtone_US_Haptic.caf
          - RingtoneDucked_UK_Haptic.caf
          - RingtoneDucked_US_Haptic.caf
          - SalientNotification_Haptic.caf
          - SedentaryTimer_Haptic.caf
          - SedentaryTimer_Salient_Haptic.caf
          - SentMessage.caf
          - shake.caf
          - Sherwood_Forest.caf
          - short_double_high.caf
          - short_double_low.caf
          - short_low_high.caf
          - SIMToolkitCallDropped.caf
          - SIMToolkitGeneralBeep.caf
          - SIMToolkitNegativeACK.caf
          - SIMToolkitPositiveACK.caf
          - SIMToolkitSMS.caf
          - SiriAutoSend_Haptic.caf
          - SiriStart_Haptic.caf
          - SiriStopFailure_Haptic.caf
          - SiriStopSuccess_Haptic.caf
          - sms-received1.caf
          - sms-received1.caf
          - sms-received2.caf
          - sms-received3.caf
          - sms-received4.caf
          - sms-received5.caf
          - sms-received6.caf
          - SOSEmergencyContactTextPrompt_Haptic.caf
          - SOSFallDetection_Haptic-Newton.caf
          - Spell.caf
          - Stockholm_Haptic.caf
          - StockholmActive_Haptic.caf
          - StockholmActiveSingleCycle_Haptic.caf
          - StockholmFailure_Haptic.caf
          - StopwatchLap_Haptic.caf
          - StopwatchReset_Haptic.caf
          - StopwatchStart_Haptic.caf
          - StopwatchStop_Haptic.caf
          - Suspense.caf
          - Swish.caf
          - SwTest1_Haptic.caf
          - SystemStartup_Haptic.caf
          - Telegraph.caf
          - Timer_Haptic.caf
          - TimerCancel_Haptic.caf
          - TimerPause_Haptic.caf
          - TimerStart_Haptic.caf
          - TimerWheelHoursDetent_Haptic.caf
          - TimerWheelMinutesDetent_Haptic.caf
          - Tink.caf
          - Tiptoes.caf
          - Tock.caf
          - tweet_sent.caf
          - Typewriters.caf
          - UISwipe_Haptic.caf
          - UISwitch_Off_Haptic.caf
          - UISwitch_On_Haptic.caf
          - Update.caf
          - ussd.caf
          - vc~ended.caf
          - vc~invitation-accepted.caf
          - vc~ringing.caf
          - vc~ringing_watch.caf
          - VoiceOver_Click_Haptic.caf
          - WalkieTalkieActiveEnd_Haptic.caf
          - WalkieTalkieActiveStart_Haptic.caf
          - WalkieTalkieReceiveEnd_Haptic.caf
          - WalkieTalkieReceiveStart_Haptic.caf
          - warsaw.caf
          - Warsaw_Haptic.caf
          - wheels_of_time.caf
          - WorkoutComplete_Haptic.caf
          - WorkoutCompleteAutoDetect.caf
          - WorkoutCountdown_Haptic.caf
          - WorkoutPaceAbove.caf
          - WorkoutPaceBelow.caf
          - WorkoutPaused_Haptic.caf
          - WorkoutPressStart_Haptic.caf
          - WorkoutResumed_Haptic.caf
          - WorkoutResumedAutoDetect.caf
          - WorkoutSaved_Haptic.caf
          - WorkoutSelect_Haptic.caf
          - WorkoutStartAutoDetect.caf
          - US-EN-Alexa-Back-Door-Opened.wav
          - US-EN-Alexa-Back-Door-Unlocked.wav
          - US-EN-Alexa-Basement-Door-Opened.wav
          - US-EN-Alexa-Basement-Door-Unlocked.wav
          - US-EN-Alexa-Boyfriend-Is-Arriving.wav
          - US-EN-Alexa-Daughter-Is-Arriving.wav
          - US-EN-Alexa-Front-Door-Opened.wav
          - US-EN-Alexa-Front-Door-Unlocked.wav
          - US-EN-Alexa-Garage-Door-Opened.wav
          - US-EN-Alexa-Girlfriend-Is-Arriving.wav
          - US-EN-Alexa-Good-Morning.wav
          - US-EN-Alexa-Good-Night.wav
          - US-EN-Alexa-Husband-Is-Arriving.wav
          - US-EN-Alexa-Mail-Has-Arrived.wav
          - US-EN-Alexa-Motion-At-Back-Door.wav
          - US-EN-Alexa-Motion-At-Front-Door.wav
          - US-EN-Alexa-Motion-Detected-Generic.wav
          - US-EN-Alexa-Motion-In-Back-Yard.wav
          - US-EN-Alexa-Motion-In-Basement.wav
          - US-EN-Alexa-Motion-In-Front-Yard.wav
          - US-EN-Alexa-Motion-In-Garage.wav
          - US-EN-Alexa-Patio-Door-Opened.wav
          - US-EN-Alexa-Patio-Door-Unlocked.wav
          - US-EN-Alexa-Smoke-Detected-Generic.wav
          - US-EN-Alexa-Smoke-Detected-In-Basement.wav
          - US-EN-Alexa-Smoke-Detected-In-Garage.wav
          - US-EN-Alexa-Smoke-Detected-In-Kitchen.wav
          - US-EN-Alexa-Son-Is-Arriving.wav
          - US-EN-Alexa-Water-Detected-Generic.wav
          - US-EN-Alexa-Water-Detected-In-Basement.wav
          - US-EN-Alexa-Water-Detected-In-Garage.wav
          - US-EN-Alexa-Water-Detected-In-Kitchen.wav
          - US-EN-Alexa-Welcome-Home.wav
          - US-EN-Alexa-Wife-Is-Arriving.wav
          - US-EN-Daisy-Back-Door-Motion.wav
          - US-EN-Daisy-Back-Door-Open.wav
          - US-EN-Daisy-Front-Door-Motion.wav
          - US-EN-Daisy-Front-Door-Open.wav
          - US-EN-Daisy-Front-Window-Open.wav
          - US-EN-Daisy-Garage-Door-Open.wav
          - US-EN-Daisy-Guest-Bath-Leak.wav
          - US-EN-Daisy-Kitchen-Sink-Leak.wav
          - US-EN-Daisy-Kitchen-Window-Open.wav
          - US-EN-Daisy-Laundry-Room-Leak.wav
          - US-EN-Daisy-Master-Bath-Leak.wav
          - US-EN-Daisy-Master-Bedroom-Window-Open.wav
          - US-EN-Daisy-Office-Window-Open.wav
          - US-EN-Daisy-Refrigerator-Leak.wav
          - US-EN-Daisy-Water-Heater-Leak.wav
          - US-EN-Morgan-Freeman-Back-Door-Closed.wav
          - US-EN-Morgan-Freeman-Back-Door-Locked.wav
          - US-EN-Morgan-Freeman-Back-Door-Opened.wav
          - US-EN-Morgan-Freeman-Back-Door-Unlocked.wav
          - US-EN-Morgan-Freeman-Basement-Door-Closed.wav
          - US-EN-Morgan-Freeman-Basement-Door-Locked.wav
          - US-EN-Morgan-Freeman-Basement-Door-Opened.wav
          - US-EN-Morgan-Freeman-Basement-Door-Unlocked.wav
          - US-EN-Morgan-Freeman-Boss-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Boyfriend-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Cleaning-Supplies-Closet-Opened.wav
          - US-EN-Morgan-Freeman-Coworker-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Daughter-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Friend-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Front-Door-Closed.wav
          - US-EN-Morgan-Freeman-Front-Door-Locked.wav
          - US-EN-Morgan-Freeman-Front-Door-Opened.wav
          - US-EN-Morgan-Freeman-Front-Door-Unlocked.wav
          - US-EN-Morgan-Freeman-Garage-Door-Closed.wav
          - US-EN-Morgan-Freeman-Garage-Door-Opened.wav
          - US-EN-Morgan-Freeman-Girlfriend-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Good-Morning.wav
          - US-EN-Morgan-Freeman-Good-Night.wav
          - US-EN-Morgan-Freeman-Liquor-Cabinet-Opened.wav
          - US-EN-Morgan-Freeman-Motion-Detected.wav
          - US-EN-Morgan-Freeman-Motion-In-Basement.wav
          - US-EN-Morgan-Freeman-Motion-In-Bedroom.wav
          - US-EN-Morgan-Freeman-Motion-In-Game-Room.wav
          - US-EN-Morgan-Freeman-Motion-In-Garage.wav
          - US-EN-Morgan-Freeman-Motion-In-Kitchen.wav
          - US-EN-Morgan-Freeman-Motion-In-Living-Room.wav
          - US-EN-Morgan-Freeman-Motion-In-Theater.wav
          - US-EN-Morgan-Freeman-Motion-In-Wine-Cellar.wav
          - US-EN-Morgan-Freeman-Patio-Door-Closed.wav
          - US-EN-Morgan-Freeman-Patio-Door-Locked.wav
          - US-EN-Morgan-Freeman-Patio-Door-Opened.wav
          - US-EN-Morgan-Freeman-Patio-Door-Unlocked.wav
          - US-EN-Morgan-Freeman-Roommate-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Searching-For-Car-Keys.wav
          - US-EN-Morgan-Freeman-Setting-The-Mood.wav
          - US-EN-Morgan-Freeman-Smartthings-Detected-A-Flood.wav
          - US-EN-Morgan-Freeman-Smartthings-Detected-Carbon-Monoxide.wav
          - US-EN-Morgan-Freeman-Smartthings-Detected-Smoke.wav
          - US-EN-Morgan-Freeman-Smoke-Detected-In-Basement.wav
          - US-EN-Morgan-Freeman-Smoke-Detected-In-Garage.wav
          - US-EN-Morgan-Freeman-Smoke-Detected-In-Kitchen.wav
          - US-EN-Morgan-Freeman-Someone-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Son-Is-Arriving.wav
          - US-EN-Morgan-Freeman-Starting-Movie-Mode.wav
          - US-EN-Morgan-Freeman-Starting-Party-Mode.wav
          - US-EN-Morgan-Freeman-Starting-Romance-Mode.wav
          - US-EN-Morgan-Freeman-Turning-Off-All-The-Lights.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Air-Conditioner.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Bar-Lights.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Chandelier.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Family-Room-Lights.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Hallway-Lights.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Kitchen-Light.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Light.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Lights.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-Mood-Lights.wav
          - US-EN-Morgan-Freeman-Turning-Off-The-TV.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Air-Conditioner.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Bar-Lights.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Chandelier.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Family-Room-Lights.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Hallway-Lights.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Kitchen-Light.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Light.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Lights.wav
          - US-EN-Morgan-Freeman-Turning-On-The-Mood-Lights.wav
          - US-EN-Morgan-Freeman-Turning-On-The-TV.wav
          - US-EN-Morgan-Freeman-Vacate-The-Premises.wav
          - US-EN-Morgan-Freeman-Water-Detected-In-Basement.wav
          - US-EN-Morgan-Freeman-Water-Detected-In-Garage.wav
          - US-EN-Morgan-Freeman-Water-Detected-In-Kitchen.wav
          - US-EN-Morgan-Freeman-Welcome-Home.wav
          - US-EN-Morgan-Freeman-Wife-Is-Arriving.wav
        custom_value: true
        multiple: false
  data_ios_sound_volumelevel:
    name: iOS Only - Sound Volume Level (Optional)
    description: The volume level of notification, were 1 equal to 100% volume. It requires iOS only - Sounds to be defined.
    required: false
    example: 0.5
    selector:
      number:
        min: 0
        max: 1
        mode: slider
        step: 0.05
  data_ios_badge:
    name: iOS Only - Badge (Optional)
    required: false
    description: Set the app icon badge in the payload. It will make the app icon badge show the number
    example: 5
    selector:
      number:
        min: 0
        max: 20
        step: 1
        mode: slider
  data_ios_interruption_level:
    name: iOS Only - Interruption Level (Optional)
    required: false
    description: Set the interruption level of a notification
    example: active
    selector:
      select:
        options:
          - passive
          - active
          - time-sensitive
          - critical
        custom_value: false
        multiple: false
  data_ios_presentation_options:
    name: iOS Only - Presentation Options (Optional)
    required: false
    description: By default, if the app is open (in the foreground) when a notification arrives, it will display the same as when the app is not active (in the background), with a visual alert showing notification contents, a badge update (if one was sent in the notification) and the sound of your choice.
    example: "[alert,badge]"
    selector:
      select:
        options:
          - alert
          - badge
          - sound
        custom_value: false
        multiple: true
  data_camera:
    name: Camera (Optional)
    description: The camera which creates the snapshot
    required: false
    selector:
      entity:
        domain: camera
  data_clickaction:
    name: Entity ID to navigate to (Optional)
    description: The Entity to navigate to when clicking on the notification
    required: false
    selector:
      entity: null
  data_clickaction_url:
    name: URL to navigate to (Optional)
    description: The URL to navigate to when clicking on the notification (custom values allowed)
    required: false
    example: /lovelace/
    selector:
      select:
        options:
          - /lovelace/
          - Enter an custom value
          - "app://com.twitter.android"
          - "settings://notification_history"
          - "intent://scan/#Intent;scheme=zxing;package=com.google.zxing.client.android;end"
          - "deep-link://example://link/to/content"
        custom_value: true
        multiple: false
  data_actions:
    name: Custom Actions (Optional)
    example: |-
      - action: "ALARM" # The key you are sending for the event
        title: "Sound Alarm" # The button title
      - action: "URI" # Must be set to URI if you plan to use a URI
        title: "Open Url"
        uri: "https://google.com" # URL to open when action is selected, can also be a lovelace view/dashboard
    description: See https://companion.home-assistant.io/docs/notifications/actionable-notifications#building-actionable-notifications
    required: false
    selector:
      object: null
sequence:
  - variables:
      all_devices: >-
        {% if notify_devices is defined %}
        {# If the user uses the field "notify_devices" then use that/those device(s) #}
        {{ notify_devices }}
        {% else %}
        {# If the user does not use the field "notify_devices" then find the device_tracker(s) that use the integration mobile_app #}
        {% set ns_devices=namespace( device_id=[] ) %}
        {% for e in (integration_entities("mobile_app")|select("search","device_tracker")|list) %}
        {% set ns_devices.device_id=ns_devices.device_id+[device_id(e)] %}
        {% endfor %}
        {{ ns_devices.device_id }}
        {% endif %}
      notify_devices_home: >-
        {# filter "all_devices" whether those that have the state "home" #}
        {% set ns_devices=namespace( device_id=[] ) %}
        {% for device_id in all_devices %}
        {% if states((device_entities(device_id)|select("search","device_tracker")|list)[0]) == "home" %}
        {% set ns_devices.device_id=ns_devices.device_id + [device_id] %}
        {% endif %}
        {% endfor %}
        {{ ns_devices.device_id }}
      notify_devices_away: >-
        {# filter "all_devices" whether those that do not have the state "home" #}
        {% set ns_devices=namespace( device_id=[]) %}
        {% for device_id in all_devices %}
        {% if states((device_entities(device_id)|select("search","device_tracker")|list)[0]) != "home" %}
        {% set ns_devices.device_id=ns_devices.device_id + [device_id] %}
        {% endif %}
        {% endfor %}
        {{ ns_devices.device_id }}
      notify_devices: >-
        {% if notify_home_or_away is not defined or notify_home_or_away not in ["Home","Away","Both"] %}
        {% set notify_home_or_away="Both" %}
        {% endif %}
        {# Finally, let the value "notify_home_or_away" control which list should used #}
        {% if notify_home_or_away == "Home" %}{{ notify_devices_home }}{% endif %}
        {% if notify_home_or_away == "Away" %}{{ notify_devices_away }}{% endif %}
        {% if notify_home_or_away == "Both" %}{{ all_devices }}{% endif %}
  - repeat:
      for_each: "{{notify_devices}}"
      sequence:
        - variables:
            entity_id: >-
              {{((device_entities(repeat.item)|select("search","device_tracker")|list)[0])}}
            manufacturer: '{{device_attr(repeat.item,"manufacturer")}}'
            service: notify.mobile_app_{{entity_id|replace("device_tracker.","")}}
            device_name: '{{device_attr(repeat.item,"name")}}'
            do_not_disturb: >-
              {# ============== #}
              {# IN DEVELOPMENT #}
              {# ============== #}
              {# Usefull for a condition to skip the notification #}
              {# It requires the following entities of the device to be enabled: #}
              {# -------------- #}
              {# Apple #}
              {# -------------- #}
              {# * binary_sensor.<device>_focus = off/on #}
              {# -------------- #}
              {# Android #}
              {# -------------- #}
              {# * sensor.<device>_ringer_mode = normal/vibrate #}
              {# * sensor.<device>_do_not_disturb_sensor = off/priority_only #}
              {# * sensor.<device>_audio_mode = normal/in_call #}
              {# * binary_sensor.<device>_music_active = off/on #}
              {# ============== #}
              {% set entities=device_entities(repeat.item) %}
              {% set ns=namespace(results=[]) %}
              {# build a list of true and false statements #}
              {% if manufacturer == "Apple" %}
              {# -------------- #}
              {# Apple #}
              {# -------------- #}
              {# check if the entity_id binary_sensor.<device>_focus is enabled #}
              {% if(entities|select("search","_focus")|list|count==1) %}
              {# binary_sensor.<device>_focus = off/on #}
              {% set setfocus=states((entities|select("search","_focus")|list)[0]) %}
              {% set ns.results=ns.results+[(focus=="on")] %}
              {% endif %}
              {% else %}
              {# -------------- #}
              {# Android #}
              {# -------------- #}
              {# check if the entity_id sensor.<device>_ringer_mode is enabled #}
              {% if (entities|select("search","_ringer_mode")|list|count==1) %}
              {% set ringer_mode=states((entities|select("search","_ringer_mode")|list)[0]) %}
              {% set ns.results=ns.results+[(ringer_mode!="normal")] %}
              {% endif%}
              {# check if the entity_id sensor.<device>_do_not_disturb_sensor is enabled #}
              {% if (entities|select("search","_do_not_disturb_sensor")|list|count==1) %}
              {% set do_not_disturb_sensor=states((entities|select("search","_do_not_disturb_sensor")|list)[0]) %}
              {% set ns.results=ns.results+[(do_not_disturb_sensor!="off")] %}
              {% endif%}
              {# check if the entity_id sensor.<device>_audio_mode is enabled #}
              {% if (entities|select("search","_audio_mode")|list|count==1) %}
              {% set audio_mode=states((entities|select("search","_audio_mode")|list)[0]) %}
              {% set ns.results=ns.results+[(audio_mode!="normal")] %}
              {% endif %}
              {# check if the entity_id binary_sensor.<device>_music_active is enabled #}
              {% if (entities|select("search","_music_active")|list|count==1) %}
              {% set music_active=states((entities|select("search","_music_active")|list)[0]) %}
              {% set ns.results=ns.results+[(music_active=="on")] %}
              {% endif %}
              {% endif %}
              {# from the list of true and false statements only check the true statements #}
              {# if there are true statements then it results in true otherwise false #}
              {{ns.results|select("equalto",True)|list|count>0}}
        - variables:
            servicedata: >-
        - variables:
            servicedata: >-
              {# object which stores all options #}
              {% set ns=namespace(servicedata=[],data=[],push=[],sound=[],actions=[],hex_color="#") %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-channels #}
              {% if data_channel is defined %}
              {% set ns.data=ns.data+[("channel",data_channel)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic/#text-to-speech-notifications #}
              {% if notify_title is defined and (notify_message|upper)=="TTS" %}
              {% set ns.data=ns.data+[("tts_text",notify_title)] %}
              {% endif %}
              {# By default Text To Speech notifications use the music stream so they will bypass the ringer mode on the device as long as the device's volume is not set to 0. You have the option of using media_stream: alarm_stream to have your notification spoken regardless of music volume. #}
              {% if data_device_ring is defined and (data_device_ring|lower) in ["on","max"] %}
              {% set data_importance="high" %}
              {# https://companion.home-assistant.io/docs/notifications/critical-notifications#android-text-to-speech-alarm-stream #}
              {% if (data_device_ring|lower)=="on" and (notify_message|upper)=="TTS" %}
              {% set ns.data=ns.data+[("media_stream","alarm_stream")] %}
              {% endif %}
              {% if (data_device_ring|lower)=="on" and (notify_message|upper)!="TTS" %}
              {% set ns.data=ns.data+[("channel","alarm_stream")] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/critical-notifications#android-text-to-speech-alarm-stream-max-volume #}
              {% if (data_device_ring|lower)=="max" and (notify_message|upper)=="TTS" %}
              {% set ns.data=ns.data+[("media_stream","alarm_stream_max")] %}
              {% set data_importance="max" %}
              {% endif %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-icon #}
              {# making sure that the value contains mdi: , otherwise skipping #}
              {% if manufacturer!="Apple" and data_notification_icon is defined and ([data_notification_icon]|select("search","mdi:")|list)|count==1 %}
              {% set ns.data=ns.data+[("notification_icon",data_notification_icon)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#grouping #}
              {% if data_group is defined %}
              {% set ns.data=ns.data+[("group",data_group)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#replacing #}
              {% if data_tag is defined %}
              {% set ns.data=ns.data+[("tag",data_tag)] %}
              {% endif %}
              {% if manufacturer!="Apple" and data_persistent is defined %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#persistent-notification #}
              {# making sure that an boolean is specified, otherwise skipping #}
              {% if data_persistent is boolean %}
              {% set data_persistent=bool(data_persistent) %}
              {% set ns.data=ns.data+[("persistent",data_persistent)] %}
              {% endif %}
              {# Clearing persistant notifications require you to define a tag (value does not matter). If the user forgets to set the tag then the default value will be: "persistent" #}
              {% if bool(data_persistent)==true and data_tag is not defined%}
              {% set ns.data=ns.data+[("tag","persistent")] %}
              {% endif %}
              {% endif %}
              {% if data_tag is defined and data_tag=="persistent" and (notify_message|lower)!="clear_notification" %}
              {% set ns.data=ns.data+[("persistent",true)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic/#subtitle--subject #}
              {% if data_subtitle is defined%}
              {% if manufacturer=="Apple" %}
              {# Apple uses "subtitle" #}
              {% set ns.data=ns.data+[("subtitle",data_subtitle)] %}
              {% endif %}
              {% if manufacturer!="Apple" %}
              {# Android uses "subject" #}
              {% set ns.data=ns.data+[("subject",data_subtitle)] %}
              {% endif %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-color #}
              {% if manufacturer!="Apple" and data_notification_color is defined %}
              {# The rgb color object selector spits it out as list with r,g and b [255,0,0]. This conflicts with the notification-color documentation, which requires HEX values. It has now been fixed. Thanks to https://github.com/velijv/home-assistant-color-helpers#rgb-to-hex #}
              {# Converting the list of [r,g,b] to hex #}
              {% for color in data_notification_color %}
              {% set ns.hex_color=ns.hex_color+('%02x'%color) %}
              {% endfor %}
              {% set ns.data=ns.data+[("color",ns.hex_color)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-sensitivity--lock-screen-visibility #}
              {% if manufacturer!="Apple" and data_visibility is defined %}
              {# making sure that data_visibility is either one of the three, otherwise skipping #}
              {% if data_visibility|lower in ["public","private","secret"] %}
              {% set ns.data=ns.data+[("visibility",data_visibility|lower)] %}
              {% endif %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#opening-a-url #}
              {% if manufacturer!="Apple" %}
              {% if data_clickaction is defined and states(data_clickaction)!="unknown" %}
              {% set ns.data=ns.data+[("clickAction","entityId:"~data_clickaction)] %}
              {% endif %}
              {% if data_clickaction_url is defined %}
              {% set ns.data=ns.data+[("clickAction",data_clickaction_url)] %}
              {% endif %}
              {% endif %}
              {% if manufacturer=="Apple" and data_clickaction_url is defined and not (
                data_clickaction_url is search("app://",ignorecase=False) or 
                data_clickaction_url is search("intent://",ignorecase=False) or 
                data_clickaction_url is search("deep-link://",ignorecase=False) or 
                data_clickaction_url is search("entityId:",ignorecase=False) or 
                data_clickaction_url is search("settings://",ignorecase=False)
              ) %}
              {% set ns.data=ns.data+[("url",data_clickaction_url)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#chronometer-notifications #}
              {# Sometime the data_chronometer is set to data_chronometer="undefined 00:00:00". this will fix this issue #}
              {% if manufacturer!="Apple" and data_chronometer is defined and data_chronometer!="undefined 00:00:00" and (as_timestamp(data_chronometer,default=0)|float()>0 or strptime(data_chronometer, 'undefined %H:%M:%S',default=0)!=0) %}
              {% if strptime(data_chronometer, 'undefined %H:%M:%S',default=0)!=0 %}
              {% set when=as_timestamp(strptime(data_chronometer, 'undefined %H:%M:%S').replace(year=now().year,month=now().month,day=now().day))|float %}
              {% else %}
              {% set when=as_timestamp(data_chronometer,default=as_timestamp(now()))|float()%}
              {% endif %}
              {% set ns.data=ns.data+[("chronometer",true)] %}
              {% set ns.data=ns.data+[("when",when)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/critical-notifications/#ios #}
              {% if manufacturer=="Apple" and data_critical is defined %}
              {% if bool(data_critical)==true %}
              {% set ns.sound=ns.sound+[("name","default")] %}
              {% set ns.sound=ns.sound+[("critical",1)] %}
              {% if data_ios_sound_volumelevel is defined and is_number(data_ios_sound_volumelevel) %}
              {% set ns.sound=ns.sound+[("volume",(data_ios_sound_volumelevel|float))] %}
              {% else %}
              {% set ns.sound=ns.sound+[("volume",1)] %}
              {% endif %}
              {% endif %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-channel-importance #}
              {% if data_importance is defined and data_importance|lower in ["max","high","default","low","min"] %}
              {# Priority (Android 7.1 and lower) #}
              {% set ns.data=ns.data+[("priority",(data_importance|lower))] %}
              {# Importance (Android 8.0 and higher) #} 
              {% if data_importance=="max" %}
              {% set data_importance="high" %}
              {% endif %}
              {% set ns.data=ns.data+[("importance",(data_importance|lower))] %}
              {% if data_importance=="high" %}
              {% set ns.data=ns.data+[("ttl",(0|int))] %}
              {% endif %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-timeout #}
              {% if manufacturer!="Apple" and data_timeout is defined and data_timeout is is_number%}
              {% set ns.data=ns.data+[("timeout",(data_timeout|int))] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#sticky-notification #}
              {% if data_sticky is defined and data_sticky|lower in [true,false,"true","false",0,1,"0","1","yes","no","enable","disable"] %}
              {% set ns.data=ns.data+[("sticky",bool(data_sticky))] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notification-attachments #}
              {# The data_camera can accept various options, but the results are different for Android or iOS #}
              {# Examples: #}
              {#  * data_camera: camera.name #}
              {#  * data_camera: /api/nest/event_media/{{ trigger.event.data.device_id }}/{{ trigger.event.data.nest_event_id }}/thumbnail #}
              {#  * data_camera: /api/nest/event_media/{{ trigger.event.data.device_id }}/{{ trigger.event.data.nest_event_id }} #}
              {#  * data_camera: /media/local/video.mp4 #}
              {#  * data_camera: https://example.com/video.mp4 #}
              {#  * data_camera: /media/local/photo.jpg #}
              {#  * data_camera: https://example.com/image.jpg #}
              {#  * data_camera: /media/local/audio.mp3 #}
              {#  * data_camera: https://example.com/audio.mp3 #}
              {% if data_camera is defined %}
                {#  * data_camera: camera.name #}
                {% if states(data_camera)!="unknown" %}
                  {% if manufacturer!="Apple" %}
                  {# https://companion.home-assistant.io/docs/notifications/notification-attachments#automatic-snapshots #}
                  {% set ns.data=ns.data+[("image","/api/camera_proxy/"~data_camera)] %}
                  {% else %}
                  {# https://companion.home-assistant.io/docs/notifications/dynamic-content#camera-stream #}
                  {% set ns.data=ns.data+[("entity_id",data_camera)] %}
                  {% endif %}
                {% endif %}
                {# https://www.home-assistant.io/integrations/nest/#media-attachments #}
                {# * image is data_camera: /api/nest/event_media/{{ trigger.event.data.device_id }}/{{ trigger.event.data.nest_event_id }}/thumbnail #}
                {# * video is data_camera: /api/nest/event_media/{{ trigger.event.data.device_id }}/{{ trigger.event.data.nest_event_id }} #}
                {% if states(data_camera) == "unknown" and data_camera is search("/api/nest/event_media/",ignorecase=False) %}
                  {% if states(data_camera) == "unknown" and data_camera is search("/thumbnail",ignorecase=False) %}
                    {% set ns.data=ns.data+[("image",data_camera)] %}
                    {% set ns.data=ns.data+[("video",(data_camera|replace("/thumbnail","")))] %}
                  {% endif %}
                  {% if states(data_camera) == "unknown" and (data_camera|regex_match('^((\/)(\w+)){5}$', ignorecase=False)) %}
                    {% set ns.data=ns.data+[("video",data_camera)] %}
                  {% endif %}
                {% endif %}
                {# https://companion.home-assistant.io/docs/notifications/notification-attachments#downloading #}
                {# check if data_camera is an allowed format from the media_source or www folder #}
                {% if data_camera is search("/media/local/",ignorecase=true) or data_camera is search("/local/",ignorecase=true) or data_camera is search("https://",ignorecase=true) or data_camera is search("http://",ignorecase=true) %}
                  
                  {# check if it is an allowed format for the image type: https://companion.home-assistant.io/docs/notifications/notification-attachments#supported-media-types #}
                  {% if data_camera is search(".jpg",ignorecase=true) or 
                        data_camera is search(".gif",ignorecase=true) or 
                        data_camera is search(".png",ignorecase=true) %}
                    {% set ns.data=ns.data+[("image",data_camera)] %}
                  {% endif %}
                  {# check if it is an allowed format for the video type: https://companion.home-assistant.io/docs/notifications/notification-attachments#supported-media-types #}
                  {% if data_camera is search(".mp4",ignorecase=true) or 
                        data_camera is search(".mpeg",ignorecase=true) or 
                        data_camera is search(".avi",ignorecase=true) %}
                    {% set ns.data=ns.data+[("video",data_camera)] %}
                  {% endif %}
                  
                  {# audio is only supported by iOS devices #} 
                  {# check if it is an allowed format for the video audio: https://companion.home-assistant.io/docs/notifications/notification-attachments#supported-media-types #}
                  {% if manufacturer=="Apple" and (
                        data_camera is search(".mp3",ignorecase=true) or 
                        data_camera is search(".aiff",ignorecase=true) or 
                        data_camera is search(".wav",ignorecase=true) 
                  ) %}
                    {% set ns.data=ns.data+[("audio",data_camera)] %}
                  {% endif %}
                {% endif %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notification-sounds #}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#sounds #}
              {% if manufacturer=="Apple" and data_ios_sound is defined %}
              {% set ns.sound=ns.sound+[("name",data_ios_sound)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/critical-notifications#ios #}
              {% if manufacturer=="Apple" and data_critical is defined and data_critical==True %}
              {% if data_ios_sound_volumelevel is not defined %}
              {# have an default value incase the data_ios_sound_volumelevel is not defined #}
              {% set data_ios_sound_volumelevel=1 %}
              {% endif %}
              {% set ns.sound=ns.sound+[("volume",(data_ios_sound_volumelevel|float))] %}
              {% set ns.sound=ns.sound+[("critical",1)] %}
              {% endif %}
              {% if manufacturer=="Apple" and data_ios_sound_volumelevel is defined and data_ios_sound_volumelevel is is_number %}
              {% set ns.sound=ns.sound+[("volume",(data_ios_sound_volumelevel|float))] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#badge #}
              {% if manufacturer=="Apple" and data_ios_badge is defined and data_ios_badge is is_number%}
              {% set ns.push=ns.push+[("badge",(data_ios_badge|int))] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#interruption-level #}
              {% if manufacturer=="Apple" and data_ios_interruption_level is defined %}
              {% if data_ios_interruption_level|lower is not in ["passive","active","time-sensitive","critical"] %}
              {# have an default value incase the data_ios_interruption_level is not correct #}
              {% set data_ios_interruption_level="active" %}
              {% endif %}
              {% set ns.push=ns.push+[("interruption-level",(data_ios_interruption_level|lower))] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/notifications-basic#presentation-options #}
              {% if manufacturer=="Apple" and data_ios_presentation_options is defined %}
              {# check if the value(s) is allowed. It can contain one or more values #}
              {% set allowed_values=["alert","badge","sound"] %}
              {% set list=namespace(allowed_value=[]) %}
              {% if (data_ios_presentation_options|lower) is in allowed_values %}
              {% set list.allowed_value=list.allowed_value+[(data_ios_presentation_options|lower)] %}
              {% else %}
              {% for value in data_ios_presentation_options %}
              {% if (value|lower) is in allowed_values %}
              {% set list.allowed_value=list.allowed_value+[(value|lower)] %}
              {% endif %}
              {% endfor %}
              {% endif %}
              {% set ns.data=ns.data+[("presentation_options",list.allowed_value)] %}
              {% endif %}
              {# https://companion.home-assistant.io/docs/notifications/actionable-notifications #}
              {# Android and iOS accept different type of actions, and this will filter those that are allowed per OS (according to the docs) #}
              {% if data_actions is defined%}
              {% for action in data_actions %}
              {# https://companion.home-assistant.io/docs/notifications/actionable-notifications#uri-values #}
              {# exclude certain uri values if the device is iOS #}
              {% if manufacturer=="Apple" and action['uri'] is defined and  (
                action['uri'] is search("app://",ignorecase=False) or 
                action['uri'] is search("intent://",ignorecase=False) or 
                action['uri'] is search("deep-link://",ignorecase=False) or 
                action['uri'] is search("entityId:",ignorecase=False) or 
                action['uri'] is search("settings://",ignorecase=False)
              ) %}
              {%else%}
              {%if manufacturer!="Apple" and (
                action['action']=="CALL" or 
                action['action']=="OPEN"
                ) and (
                action['uri'] is search("https://",ignorecase=False) or 
                action['uri'] is search("tel:",ignorecase=False)
                ) %}
              {%else%}
              {%set ns.actions=ns.actions+[(action)] %}
              {% endif %}
              {% endif %}
              {%endfor%}
              {% if ns.actions|count>=1%}
              {% set ns.data=ns.data+[("actions",ns.actions)] %}
              {% endif %}
              {% endif %}
              {# Finally add the sound to the push object as an DICT #}
              {% if (ns.sound|count)>=1 %}
              {% set ns.push=ns.push+[("sound",dict.from_keys(ns.sound))] %}
              {% endif %}
              {# Finally add the push to the data object as an DICT #}
              {% if (ns.push|count)>=1 %}
              {% set ns.data=ns.data+[("push",dict.from_keys(ns.push))] %}
              {% endif %}
              {# message and title are basic entries, but title is optional #}
              {% if notify_title is defined and (notify_message|upper)!="TTS"%}
              {% set ns.servicedata=ns.servicedata+[("title",notify_title)] %}
              {% endif %}
              {# make sure that the message: <value> has an default value or is formatted correctly #}
              {% if notify_message is not defined %}
              {% set notify_message="Hello World" %}
              {% endif %}
              {% if (notify_message|upper)=="TTS" %}
              {% set notify_message="TTS" %}
              {% endif %}
              {% if (notify_message|lower)=="clear_notification" %}
              {% set notify_message=(notify_message|lower) %}
              {% endif %}
              {% set ns.servicedata=ns.servicedata+[("message",notify_message)] %}
              {% set ns.servicedata=ns.servicedata+[("data",dict.from_keys(ns.data))] %}
              {# Finally show the results as an DICT #}
              {{dict.from_keys(ns.servicedata)}}
        - service: "{{service}}"
          data: "{{servicedata}}"
